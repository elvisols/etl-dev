# Define root config
# spring.cloud.stream.kafka.streams.binder.configuration.application.server: <server>:<port>
spring.cloud.stream.kafka.streams.binder.application-id=eltstream
spring.cloud.stream.kafka.streams.binder.configuration.enable.idempotence=true
spring.cloud.stream.kafka.streams.binder.configuration.commit.interval.ms=1000
spring.cloud.stream.kafka.streams.binder.configuration.default.key.serde=org.apache.kafka.common.serialization.Serdes$StringSerde
spring.cloud.stream.kafka.streams.binder.configuration.default.value.serde=ng.exelon.etl.serde.DtdRecordSerde

# oraclesource
spring.cloud.stream.bindings.oraclesource.destination=oraclesource
spring.cloud.stream.bindings.oraclesource.producer.header-mode=raw
spring.cloud.stream.bindings.oraclesource.producer.use-native-encoding=true
spring.cloud.stream.kafka.bindings.oraclesource.producer.configuration.key.serializer=org.apache.kafka.common.serialization.StringSerializer
spring.cloud.stream.kafka.bindings.oraclesource.producer.configuration.value.serializer=ng.exelon.etl.serde.DtdRecordSerializer
spring.cloud.stream.kafka.streams.bindings.oraclesource.producer.value-serde=ng.exelon.etl.serde.DtdRecordSerde

# oraclesource
spring.cloud.stream.bindings.oraclesourcein.destination=oraclesource
spring.cloud.stream.bindings.oraclesourcein.group=oraclesourceingrp
spring.cloud.stream.bindings.oraclesourcein.consumer.header-mode=raw
spring.cloud.stream.bindings.oraclesourcein.consumer.use-native-decoding=true
spring.cloud.stream.kafka.streams.bindings.oraclesourcein.consumer.key-serde=org.apache.kafka.common.serialization.Serdes$StringSerde
spring.cloud.stream.kafka.streams.bindings.oraclesourcein.consumer.value-serde=ng.exelon.etl.serde.DtdRecordSerde
#            
# user stat out
spring.cloud.stream.bindings.userstatout.destination=userstats
spring.cloud.stream.bindings.userstatout.consumer.header-mode=raw
spring.cloud.stream.bindings.userstatout.producer.use-native-encoding=true
#spring.cloud.stream.kafka.bindings.userstatin.producer.configuration.key.serializer=org.apache.kafka.common.serialization.StringSerializer
#spring.cloud.stream.kafka.bindings.userstatin.producer.configuration.value.serializer=ng.exelon.etl.serde.UserStatSerializer
spring.cloud.stream.kafka.streams.bindings.userstatout.producer.key-serde=org.apache.kafka.common.serialization.Serdes$StringSerde
spring.cloud.stream.kafka.streams.bindings.userstatout.producer.value-serde=ng.exelon.etl.serde.UserStatSerde
#
# user stat in
spring.cloud.stream.bindings.userstatin.destination=userstats
spring.cloud.stream.bindings.userstatin.consumer.use-native-decoding=true
spring.cloud.stream.bindings.userstatin.group=userstatgrp
spring.cloud.stream.bindings.userstatin.content-type=application/json
spring.cloud.stream.bindings.userstatin.consumer.header-mode=raw
spring.cloud.stream.kafka.streams.bindings.userstatin.consumer.key-serde=org.apache.kafka.common.serialization.Serdes$StringSerde
spring.cloud.stream.kafka.streams.bindings.userstatin.consumer.value-serde=ng.exelon.etl.serde.UserStatSerde
# credit exception stat out
spring.cloud.stream.bindings.creditexceptionout.destination=creditexceptionout
spring.cloud.stream.bindings.creditexceptionout.producer.use-native-encoding=true
spring.cloud.stream.kafka.streams.bindings.creditexceptionout.producer.key-serde=org.apache.kafka.common.serialization.Serdes$StringSerde
spring.cloud.stream.kafka.streams.bindings.creditexceptionout.producer.value-serde=ng.exelon.etl.serde.DtdRecordSerde
# debit exception stat out
spring.cloud.stream.bindings.debitexceptionout.destination=debitexceptionout
spring.cloud.stream.bindings.debitexceptionout.producer.use-native-encoding=true
spring.cloud.stream.kafka.streams.bindings.debitexceptionout.producer.key-serde=org.apache.kafka.common.serialization.Serdes$StringSerde
spring.cloud.stream.kafka.streams.bindings.debitexceptionout.producer.value-serde=ng.exelon.etl.serde.DtdRecordSerde
# user stat out
spring.cloud.stream.bindings.normalstatout.destination=normalstatout
spring.cloud.stream.bindings.normalstatout.producer.use-native-encoding=true
spring.cloud.stream.kafka.streams.bindings.normalstatout.producer.key-serde=org.apache.kafka.common.serialization.Serdes$StringSerde
spring.cloud.stream.kafka.streams.bindings.normalstatout.producer.value-serde=ng.exelon.etl.serde.DtdRecordSerde

#
# ElasticSearch config
elasticsearch.clustername = hp650-cluster-application
elasticsearch.host = localhost
elasticsearch.port = 9300

# logging
#logging.level.root=ERROR
#logging.level.com.company.myproject = DEBUG
#logging.level.org.springframework.web: DEBUG
#logging.level.org.hibernate: ERROR
#logging.file = /home/ubuntu/myproject.log  //logging.file=${java.io.tmpdir}/${spring.application.name}.log
